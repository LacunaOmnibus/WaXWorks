use v5.14;

package MyApp::GUI::Frame::Notepad {
    use utf8;
    use open qw(:std :utf8);
    use Data::Dumper;
    use English qw( -no_match_vars );
    use IO::All;
    use Moose;
    use Wx qw( :everything );
    use Wx::Event qw(EVT_CLOSE EVT_SIZE);
    
    use MooseX::NonMoose::InsideOut;
    extends 'Wx::Frame';
    with 'MyApp::Roles::Platform';

    use MyApp::GUI::Frame::Notepad::MenuBar;
    use MyApp::GUI::Frame::Notepad::StatusBar;

    has 'border_size' => (
        is      => 'ro', 
        isa     => 'Int',
        default => 10,
        documentation => q{
            The amount of space used to separate components from the edges of the 
            dialog.
            This isn't "automatic" - any windows that touch the edge of the frame 
            need to set a border of this size between themselves and the frame 
            edge.
        }
    );
    has 'file_path' => (
        is          => 'rw',
        isa         => 'Str',
        clearer     => 'clear_file_path',
        documentation => q{
            Where the current file is being saved.  Populated by do_open() and 
            do_saveas().  If do_save() is called while this attribute is still 
            undef, do_saveas() will be called to figure out where the file 
            should end up.
        }
    );
    has 'initial_centered' => (
        is          => 'ro',
        isa         => 'Bool',
        default     => 1,
    );
    has 'initial_height' => (
        is          => 'ro',
        isa         => 'Int',
        default     => 600,
    );
    has 'initial_width' => (
        is          => 'ro',
        isa         => 'Int',
        default     => 800,
    );
    has 'menu_bar' => (
        is          => 'rw',
        isa         => 'MyApp::GUI::Frame::Notepad::MenuBar',
        lazy_build  => 1,
    );
    has 'old_top_window' => (
        is          => 'rw',
        isa         => 'Maybe[Wx::Window]',
    );
    has 'status_bar' => (
        is          => 'rw',
        isa         => 'MyApp::GUI::Frame::Notepad::StatusBar',
        lazy_build  => 1,
    );
    #############
    has 'file_open' => (
        is          => 'rw',
        isa         => 'Wx::FileDialog',
        lazy_build  => 1,
    );
    has 'file_saveas' => (
        is          => 'rw',
        isa         => 'Wx::FileDialog',
        lazy_build  => 1,
    );
    has 'txt_notearea' => (
        is          => 'rw',
        isa         => 'Wx::TextCtrl',
        lazy_build  => 1,
    );
    has 'szr_main' => (
        is          => 'rw',
        isa         => 'Wx::Sizer',
        lazy_build  => 1,
    );

    sub FOREIGNBUILDARGS {#{{{
        my $self = shift;
        my %args = @_;

        my $pos = $args{'position'} // wxDefaultPosition;

        return(
            undef,
            -1,
            wxTheApp->GetAppName() . " - Notepad",      # Window title
            $pos,
            wxDefaultSize,
            wxDEFAULT_FRAME_STYLE,
            "Notepad",                                  # Window name
        );
    }#}}}
    sub BUILD {
        my $self = shift;

        $self->Show(0);
        $self->SetSize( Wx::Size->new($self->initial_width, $self->initial_height) );

        ### Set the frame icon
        $self->SetIcon( wxTheApp->get_app_icon() );

        ### Add the textual menu bar to the top
        $self->SetMenuBar( $self->menu_bar );

        ### Add frame content elements
        $self->szr_main->Add($self->txt_notearea, 1, wxEXPAND, 0);

        ### Set ourself as the app's top window
        #$self->old_top_window( wxTheApp->GetTopWindow );
        #wxTheApp->SetTopWindow( $self );

        ### Create the status bar, and set the pane to receive helpstring text 
        ### generated by menu selections.  -1 turns off helpstring display 
        ### altogether.
        $self->SetStatusBar( $self->status_bar );
        $self->SetStatusBarPane(0);

        $self->SetSizer($self->szr_main);
        $self->_set_events;
        $self->Show(1);
        return $self;
    }

    sub _build_file_open {#{{{
        my $self = shift;
        my $fd = Wx::FileDialog->new(
            $self,
            "Choose a file...",
            q{},                        # default dir
            $self->file_path || q{},    # default file
            '*.txt',
            wxFD_OPEN
            |wxFD_FILE_MUST_EXIST
            ,
        );
        return $fd;
    }#}}}
    sub _build_file_saveas {#{{{
        my $self = shift;
        my $fd = Wx::FileDialog->new(
            $self,
            "Choose a file...",
            q{},        # default dir
            q{},        # default file
            '*.txt',
            wxFD_SAVE
            |wxFD_OVERWRITE_PROMPT
            ,
        );
        return $fd;
    }#}}}
    sub _build_menu_bar {#{{{
        my $self = shift;
        my $mb = MyApp::GUI::Frame::Notepad::MenuBar->new( parent => $self );
        return $mb;
    }#}}}
    sub _build_status_bar {#{{{
        my $self = shift;
        my $sb = MyApp::GUI::Frame::Notepad::StatusBar->new( frame => $self, caption => "Notepad" );
        return $sb;
    }#}}}
    sub _build_szr_main {#{{{
        my $self = shift;

        return $self->build_sizer($self, wxVERTICAL, 'Main');
    }#}}}
    sub _build_txt_notearea {#{{{
        my $self = shift;

        my $v = Wx::TextCtrl->new(
            $self, -1, 
            q{},
            wxDefaultPosition, 
            wxDefaultSize,
            wxTE_MULTILINE
            |wxTE_NOHIDESEL
            |wxTE_RICH
        );
        $v->SetOwnFont( # Set just my font, not also the fonts of all my children
            Wx::Font->new(
                24,                         # point size
                wxFONTFAMILY_ROMAN,
                wxFONTSTYLE_NORMAL,
                wxFONTWEIGHT_NORMAL,
                0,                          # true for underline; windows and motif 2.x only

                ### These all show the snowman correctly.  Several fonts 
                ### provided arbitrarily as examples.
                #'Comic Sans MS',           # trololol
                #'DejaVu Serif Condensed',  # narrow serif, not bad.
                #'Source Code Pro',         # sans-serif, fixed-width.  Probably not on your system by default.
                #'Unifont, Medium',         # sans-serif, variable.
                'Verdana',                 # etc - pick one.
            )
        );
        $v->SetValue("â˜ƒ");                 # Unicode snowman.

       return $v;
    }#}}}
    sub _set_events {#{{{
        my $self = shift;
        EVT_SIZE(   $self,  sub{$self->OnResize(@_)}    );
        EVT_CLOSE(  $self,  sub{$self->OnClose(@_)}    );
    }#}}}

    sub do_copy {#{{{
        my $self = shift;
        $self->txt_notearea->Copy() if $self->txt_notearea->CanCopy;
        return 1;
    }#}}}
    sub do_cut {#{{{
        my $self = shift;
        $self->txt_notearea->Cut() if $self->txt_notearea->CanCut;
        return 1;
    }#}}}
    sub do_paste {#{{{
        my $self = shift;
        $self->txt_notearea->Paste() if $self->txt_notearea->CanPaste;
        return 1;
    }#}}}
    sub do_open {#{{{
        my $self  = shift;

        $self->file_open->ShowModal();
        $self->file_path( $self->file_open->GetPath() );

    ### CHECK
    ### this entire alarm thing is just me testing the throbber and needs to 
    ### go away.
        local %SIG = ();
        $SIG{'ALRM'} = sub{
            wxTheApp->throb_end( $self->status_bar );

        };
        alarm 2;
        wxTheApp->throb_start( $self->status_bar );

        my $contents = $self->open_file( $self->file_path );
        $self->txt_notearea->SetValue( $contents );

        return 1;
    }#}}}
    sub do_new {#{{{
        my $self  = shift;

        $self->txt_notearea->SetValue( q{} );
        $self->clear_file_path();

        return 1;
    }#}}}
    sub do_save {#{{{
        my $self  = shift;

        if( -e -w $self->file_path() ) {
            if( $self->save_file($self->txt_notearea->GetValue()) ) {
                wxTheApp->popmsg("Saved " . $self->file_saveas->GetPath(), "File Saved");
                return 1;
            }
        }
        else {
            return $self->do_saveas;
        }

        return 1;
    }#}}}
    sub do_saveas {#{{{
        my $self  = shift;

        $self->file_saveas->ShowModal();
        $self->file_path( $self->file_saveas->GetPath() );

        if( $self->save_file($self->txt_notearea->GetValue()) ) {
            wxTheApp->popmsg("Saved " . $self->file_saveas->GetPath(), "File Saved");
            return 1;
        }

        return 0;
    }#}}}
    sub open_file {#{{{
        my $self = shift;
        my $file = shift;

        unless( -e -r $self->file_path ) {
            wxTheApp->poperr("Unable to open selected file: $!", "File Open Error");
            return 0;
        }

        my $raw < io $self->file_path;
        my $content = ($OSNAME eq 'MSWin32') ? wxTheApp->dos2unix( $raw ) : $raw;
        return $content;
    }#}}}
    sub save_file {#{{{
        my $self = shift;
        my $text = shift;

        my $out;
        unless( open $out, '>', $self->file_path ) {
            wxTheApp->poperr("Unable to open selected file: $!", "File Save Error");
            return 0;
        }

        my $content = ($OSNAME eq 'MSWin32') ? wxTheApp->unix2dos( $text ) : $text;
        print $out $content;
        close $out;

        return 1;
    }#}}}

    sub OnClose {#{{{
        my $self    = shift;
        my $frame   = shift;    # same as $self
        my $event   = shift;    # Wx::CloseEvent

        $event->Skip;
    }#}}}
    sub OnResize {#{{{
        my $self    = shift;
        my $frame   = shift;
        my $event   = shift;

        $self->status_bar->init();
        $self->szr_main->SetMinSize( $self->GetClientSize->width, -1 ); 
        $self->Layout;

        return 1;
    }#}}}

    no Moose;
    __PACKAGE__->meta->make_immutable;
}

1;

__END__

=head1 NAME

MyApp::GUI::Frame::Notepad - Example Notepad-clone frame

=head1 SYNOPSIS

 $frame = MyApp::GUI::Frame::Notepad->new();

=head1 DESCRIPTION

A Notepad-like text editor, including most of the filesystem features (open, 
save as, etc) you'd expect.

The editor is probably too simplistic to be useful; it exists mainly as a 
repository of examples on how to work with the filesystem.

=head1 METHODS

=head2 Contstructor - new

=over 4

=item * ARGS

=over 8

=item * none

=back

=item * RETURNS

=over 8

=item * C<MyApp::GUI::Frame::Notepad> object

=back

=back

